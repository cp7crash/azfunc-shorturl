// Generated by https://quicktype.io
using System;
using System.Collections.Generic;
using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace cp7crash.AzFunc.ShortUrl.Prismic
{
   
    public partial class RootResponse
    {
        [JsonProperty("refs")]
        public Ref[] Refs { get; set; }

        [JsonProperty("integrationFieldsRef")]
        public object IntegrationFieldsRef { get; set; }

        [JsonProperty("bookmarks")]
        public Bookmarks Bookmarks { get; set; }

        [JsonProperty("types")]
        public Dictionary<string, string> Types { get; set; }

        [JsonProperty("languages")]
        public Language[] Languages { get; set; }

        [JsonProperty("tags")]
        public string[] Tags { get; set; }

        [JsonProperty("forms")]
        public Forms Forms { get; set; }

        [JsonProperty("oauth_initiate")]
        public Uri OauthInitiate { get; set; }

        [JsonProperty("oauth_token")]
        public Uri OauthToken { get; set; }

        [JsonProperty("version")]
        public string Version { get; set; }

        [JsonProperty("license")]
        public string License { get; set; }

        [JsonProperty("experiments")]
        public Experiments Experiments { get; set; }

        public string HeadRef() {
            
            foreach(Ref refObj in Refs) 
                if(refObj.IsMasterRef)
                    return refObj.RefRef;

            return null;
        }

        public string RefByType(string refType) {
            
            foreach(Ref refObj in Refs)
                if(string.Equals(refObj.Label, refType, StringComparison.OrdinalIgnoreCase))
                    return refObj.RefRef;
            
            return null;
        }
    }

    public partial class Bookmarks
    {
    }

    public partial class Experiments
    {
        [JsonProperty("draft")]
        public object[] Draft { get; set; }

        [JsonProperty("running")]
        public object[] Running { get; set; }
    }

    public partial class Forms
    {
        [JsonProperty("everything")]
        public Everything Everything { get; set; }
    }

    public partial class Everything
    {
        [JsonProperty("method")]
        public string Method { get; set; }

        [JsonProperty("enctype")]
        public string Enctype { get; set; }

        [JsonProperty("action")]
        public Uri Action { get; set; }

        [JsonProperty("fields")]
        public Fields Fields { get; set; }
    }

    public partial class Fields
    {
        [JsonProperty("ref")]
        public After Ref { get; set; }

        [JsonProperty("q")]
        public After Q { get; set; }

        [JsonProperty("lang")]
        public After Lang { get; set; }

        [JsonProperty("page")]
        public Page Page { get; set; }

        [JsonProperty("pageSize")]
        public Page PageSize { get; set; }

        [JsonProperty("after")]
        public After After { get; set; }

        [JsonProperty("fetch")]
        public After Fetch { get; set; }

        [JsonProperty("fetchLinks")]
        public After FetchLinks { get; set; }

        [JsonProperty("graphQuery")]
        public After GraphQuery { get; set; }

        [JsonProperty("orderings")]
        public After Orderings { get; set; }

        [JsonProperty("referer")]
        public After Referer { get; set; }
    }

    public partial class After
    {
        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("multiple")]
        public bool Multiple { get; set; }
    }

    public partial class Page
    {
        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("multiple")]
        public bool Multiple { get; set; }

        [JsonProperty("default")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Default { get; set; }
    }

    public partial class Language
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }
    }

    public partial class Ref
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("ref")]
        public string RefRef { get; set; }

        [JsonProperty("label")]
        public string Label { get; set; }

        [JsonProperty("isMasterRef")]
        public bool IsMasterRef { get; set; }
    }

    public partial class Root
    {
        public static Root FromJson(string json) => JsonConvert.DeserializeObject<Root>(json, Prismic.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Root self) => JsonConvert.SerializeObject(self, Prismic.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters = {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
